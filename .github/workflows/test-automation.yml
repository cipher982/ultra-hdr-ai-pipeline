name: HDR Pipeline Test Automation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-foundation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "0.4.18"
    
    - name: Install dependencies
      run: |
        uv sync --extra dev
    
    - name: Run model tests
      run: |
        uv run pytest tests/test_models.py -v --tb=short
    
    - name: Run pipeline tests  
      run: |
        uv run pytest tests/test_pipeline.py -v --tb=short
    
    - name: Run visual validation tests
      run: |
        uv run pytest tests/test_visual_validation.py -v --tb=short -m "not slow"
    
    - name: Run web configuration tests
      run: |
        uv run pytest tests/test_web_simple.py::TestWebConfiguration -v
    
    - name: Generate coverage report
      run: |
        uv run pytest tests/ --cov=hdr --cov-report=xml --tb=short -m "not slow and not web"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-web-automation:
    runs-on: ubuntu-latest
    needs: test-foundation
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
    
    - name: Install dependencies
      run: |
        uv sync --extra dev
    
    - name: Install Playwright browsers
      run: |
        uv run playwright install chromium
    
    - name: Run web API tests
      run: |
        uv run pytest tests/test_web_simple.py -v --tb=short -m "web"
    
    - name: Run integration tests
      run: |
        uv run pytest tests/test_web_simple.py::TestFullWorkflow -v --tb=short

  test-visual-regression:
    runs-on: ubuntu-latest
    needs: test-foundation
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
    
    - name: Install dependencies
      run: |
        uv sync --extra dev
    
    - name: Run visual similarity tests
      run: |
        uv run pytest tests/test_visual_validation.py::TestVisualSimilarityMetrics -v
    
    - name: Run golden master tests
      run: |
        uv run pytest tests/test_visual_validation.py -v -m "visual" --tb=short
      continue-on-error: true  # Golden masters may not exist initially

  performance-benchmarks:
    runs-on: ubuntu-latest
    needs: test-foundation
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install uv  
      uses: astral-sh/setup-uv@v2
    
    - name: Install dependencies
      run: |
        uv sync --extra dev
    
    - name: Run performance tests
      run: |
        uv run pytest tests/ -v -m "slow" --tb=short
    
    - name: Benchmark pipeline performance
      run: |
        uv run python -c "
        import time
        from hdr.gainmap_pipeline import run_gainmap_pipeline, GainMapPipelineConfig
        from tests.conftest import synthetic_sdr_image
        import tempfile
        from pathlib import Path
        
        with tempfile.TemporaryDirectory() as temp_dir:
            # Create synthetic image
            import numpy as np
            from PIL import Image
            img_array = np.random.randint(0, 255, (400, 300, 3), dtype=np.uint8)
            img_path = Path(temp_dir) / 'bench.jpg'
            Image.fromarray(img_array).save(img_path, 'JPEG')
            
            # Benchmark
            start = time.time()
            config = GainMapPipelineConfig(model_type='synthetic')
            run_gainmap_pipeline(str(img_path), str(Path(temp_dir) / 'out.jpg'), config)
            duration = time.time() - start
            
            print(f'Pipeline processing time: {duration:.2f}s')
            assert duration < 10, f'Performance regression: {duration:.2f}s > 10s'
        "